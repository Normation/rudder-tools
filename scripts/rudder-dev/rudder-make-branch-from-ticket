#!/usr/bin/env python

from __future__ import print_function
import sys
import os
import re
import string

import requests # apt-get install python-requests
try:
  import configparser
  config = configparser.ConfigParser()
except ImportError:
  import ConfigParser
  config = ConfigParser.ConfigParser()

CONFIG_FILE = "~/.rudder-dev"
REDMINE_API_URL = "http://www.rudder-project.org/redmine"
REDMINE_API_LIMIT = 100
REDMINE_CLOSED_STATUSES = [5, 6, 16, 11]
REDMINE_META_TRACKERS = [2, 3, 4]

TRACKER_NAME_MAPPING = { 'Bug': 'bug', 'Implementation (development)': 'dev', 'Implementation (integration)': 'int' }


def usage():
  print("Usage: rudder-make-branch-from-ticket <ticket number>")

def get_redmine_ticket(id):
  tickets_req = requests.get(REDMINE_API_URL + "/issues/" + str(id) + ".json")
  return tickets_req.json()['issue'] if tickets_req.status_code == requests.codes.ok else None

def get_config(item, default):
  try:
    return parser.get("default", item)
  except :
    # TODO print error and quit
    return ""

# Read configuration
config.read(os.path.expanduser(CONFIG_FILE))
GITHUB_USERNAME = get_config("username", "No 'username' entry in " + CONFIG_FILE)
GITHUB_TOKEN = get_config("token", "No 'token' entry in " + CONFIG_FILE + " go to https://github.com/settings/tokens/new to make one")
UPSTREAM_REPOSITORY = get_config("upstream", "No 'upstream' entry in " + CONFIG_FILE)

# Check arguments
if len(sys.argv) != 2:
  usage()
  exit(1)

ticket_id = sys.argv[1]

print("Looking for Redmine ticket #" + str(ticket_id) + "... ", end=' ')
sys.stdout.flush() # to display previous unfinished line

ticket = get_redmine_ticket(ticket_id)

if not ticket:
  print("Not found!")
  print("***** ERROR: ticket not found. Exiting.")
  exit(2)

print("Done")

# Get ticket elements
info = {}
info['type'] = ticket['tracker']['name']
info['name'] = ticket['subject']
if 'fixed_version' in list(ticket.keys()):
  info['version'] = ticket['fixed_version']['name']

print("* Found " + info['type'] + " #" + str(ticket_id) + ": " + info['name'])
print("* URL: " + REDMINE_API_URL + "/issues/" + str(ticket_id))

# Check ticket type
if ticket['tracker'] in REDMINE_META_TRACKERS:
  print("This is a meta-ticket! You cannot make a pull request on this ticket.")
  print("Create an implementation ticket (or requalify this ticket if appropriate).")
  print("***** ERROR: This is a meta-ticket. Exiting.")
  exit(3)

# get current branch
current_branch = os.popen("git status -sb --porcelain").read()
current_branch = re.sub(r'^## (.*?)\n(.*\n)?$', r'\1', current_branch, flags=0)

# checkout origin branch name for the patch
if 'version' in list(info.keys()):
  original_version = re.sub(r'^(\d+\.\d+)\..*$', r'\1', info['version'], flags=0)
  original_branch_name = "branches/rudder/" + original_version
  print("* Must branch from '" + original_branch_name + "' and you are at '" + current_branch + "'")
else:
  print("* Target version not found, you are branching from ... '" + current_branch + "'")

# Build branch name
branchified_ticket_name = re.sub("__+", "_", re.sub("[^" + string.ascii_letters + string.digits + "]", "_", info['name'].strip().lower())).strip("_")
branch_name = TRACKER_NAME_MAPPING[info['type']] + "_" + str(ticket_id) + "/" + branchified_ticket_name

# Create the branch
print("Creating branch " + branch_name)
os.system("git checkout -b " + branch_name)

print("")
print("When you're ready, run something like this:")
print("git commit -am \"Fixes #""" + str(ticket_id) + ": " + info['name'].replace("\"", "\\\"") + "\"")
print("git push <your repo name, eg origin> " + branch_name)

print("")
print("Then, you should be able to initiate a Pull Request from:")
print("https://github.com/Normation/<repo-name>/")

# TODO: Automate creating the pull request and match the branch to PR against from the target version in the Redmine ticket
# Like this :
# curl -u 'peckpeck:password' https://api.github.com/repos/Normation/rudder-tools/pulls -i -v -d '{"title": "This is a test pull request", "body": "Just ignore for now", "head": "peckpeck:master", "base": "master" }'
